import csv

# All possible words
words = []

def fetchWords(file_path):
    """
    Loads all words from a CSV file into the global 'words' list.
    
    Reads the file, assumes each word is in a new row,
    and populates the 'words' list with these entries.
    """

    # Open file
    with open(file_path, mode='r', newline='') as file:
        # CSV reader
        csv_reader = csv.reader(file)
    
        # Add all words to words
        for row in csv_reader:
            words.append(row[0])

def filterWords(word, positionValues):
    """
    Filters the global 'words' list based on the provided word and positional hints.
    
    Args:
        word (str): The word used for filtering.
        positionValues (list[int]): List of positional hints (length 5):
            - 0: The letter is not in the answer.
            - 1: The letter is in the answer but not in the correct position.
            - 2: The letter is in the correct position.
    
    Example:
        word = "arose"
        positionValues = [0, 1, 2, 0, 0]
        Filters words such that:
        - 'a' is excluded from all words.
        - 'r' is included but not at position 1.
        - 'o' must be in position 2.
    """
    global words
    
    for i in range(5):
        letter = word[i]
        # Grey Square - If the letter is not in the word
        if positionValues[i] == 0:
            words = list(filter(lambda current_word: letter not in current_word, words))
        # Yellow Square - If the letter is in the word but not the correct position
        elif positionValues[i] == 1:
            words = list(filter(lambda current_word: letter in current_word and letter != current_word[i] and letterCount(current_word, letter) >= letterCount(word, letter), words))
        # Green Square - If the letter is in the correct position
        elif positionValues[i] == 2:
            words = list(filter(lambda current_word: letter == current_word[i], words))

def fetchData(localWords):
    """
    Analyzes letter statistics for a given list of words.
    
    Args:
        localWords (list[str]): List of words to analyze.
    
    Returns:
        dict: A dictionary containing:
            - 'occurrences': Count of words containing each letter.
            - 'frequencies': Total occurrences of each letter across all positions.
            - 'positions': Positional frequency of each letter.
    """
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    
    # Initialize Hash Maps
    occurrences = {letter: 0 for letter in alphabet}
    frequencies = {letter: 0 for letter in alphabet}
    positions = {letter: [0] * 5 for letter in alphabet}

    # Analyze each word
    for word in localWords:
        searched_letters = []
        for index, letter in enumerate(word):
            if letter in alphabet:
                frequencies[letter] += 1
                positions[letter][index] += 1
                if letter not in searched_letters:
                    occurrences[letter] += 1
                    searched_letters.append(letter)
    
    return {
        "occurrences": occurrences,
        "frequencies": frequencies,
        "positions": positions
    }

def letterCount(word, letter):
    """
    Counts the number of occurrences of a specific letter in a word.
    
    Args:
        word (str): The word to search.
        letter (str): The letter to count.
    
    Returns:
        int: Number of times the letter appears in the word.
    """
    return word.count(letter)

def wordScore(word, data):
    """
    Calculates a score for a word based on letter occurrences.
    
    Args:
        word (str): The word to score.
        data (dict): The letter statistics generated by 'fetchData'.
    
    Returns:
        list: A tuple [word, score], where the score is the sum of
              unique letter occurrences in the word.
    """
    score = 0
    lettersChecked = []
    for letter in word:
        if letter not in lettersChecked:
            score += data["occurrences"][letter]
            lettersChecked.append(letter)
    return [word, score]

# Console program
def main():
    """
    Interactive Wordle helper tool.
    - Displays total possible words and top guesses at the start.
    - Allows input of position values without spaces (e.g., '12000').
    - Ends when only one possible word remains.
    """
    # Fetch all words from file
    fetchWords('possible-answers.csv')
    print(f"Total words fetched: {len(words)}")

    # Analyze initial data and display the top 10 best starting words
    data = fetchData(words)
    scored_words = [wordScore(word, data) for word in words]
    scored_words.sort(key=lambda x: x[1], reverse=True)

    print("\nTop 10 starting guesses based on letter statistics:")
    for i, (word, score) in enumerate(scored_words[:10], 1):
        print(f"{i}. {word} (Score: {score})")

    # Main game loop
    while len(words) > 1:
        print(f"\nPossible words remaining: {len(words)}")
        user_word = input("Enter your word: ").strip().lower()
        position_values = list(map(int, list(input("Enter the position values (e.g., 12000): ").strip())))

        # Filter words based on user input
        filterWords(user_word, position_values)

        if len(words) == 1:
            print(f"\nThe answer is: {words[0]}")
            break

        # Update data for remaining words
        data = fetchData(words)
        print(f"\nTop 10 possible words based on current statistics:")
        scored_words = [wordScore(word, data) for word in words]
        scored_words.sort(key=lambda x: x[1], reverse=True)
        for i, (word, score) in enumerate(scored_words[:10], 1):
            print(f"{i}. {word} (Score: {score})")

if __name__ == "__main__":
    main()